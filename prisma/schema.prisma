generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model japanese_words {
  id             Int              @id @default(autoincrement())
  word           String           @unique
  furigana       String
  created_at     DateTime         @default(now())
  updated_at     DateTime?
  jp_en_meanings jp_en_meanings[]
  jp_th_meanings jp_th_meanings[]
}

model thai_words {
  id             Int              @id @default(autoincrement())
  word           String           @unique
  created_at     DateTime         @default(now())
  updated_at     DateTime?
  jp_th_meanings jp_th_meanings[]
}

model english_words {
  id             Int              @id @default(autoincrement())
  word           String           @unique
  created_at     DateTime         @default(now())
  updated_at     DateTime?
  jp_en_meanings jp_en_meanings[]
}

model jp_th_meanings {
  id               Int            @id @default(autoincrement())
  japanese_word_id Int
  thai_word_id     Int
  created_at       DateTime       @default(now())
  updated_at       DateTime?
  japanese_word    japanese_words @relation(fields: [japanese_word_id], references: [id])
  thai_word        thai_words     @relation(fields: [thai_word_id], references: [id])

  @@unique([japanese_word_id, thai_word_id])
}

model jp_en_meanings {
  id               Int            @id @default(autoincrement())
  japanese_word_id Int
  english_word_id  Int
  created_at       DateTime       @default(now())
  updated_at       DateTime?
  japanese_word    japanese_words @relation(fields: [japanese_word_id], references: [id])
  english_word     english_words  @relation(fields: [english_word_id], references: [id])

  @@unique([japanese_word_id, english_word_id])
}

model users {
  id           Int          @id @default(autoincrement())
  username     String       @unique
  email        String       @unique
  display_name String?
  avatar       String?
  bio          String?
  password     String
  created_at   DateTime     @default(now())
  updated_at   DateTime?
  user_roles   user_roles[]
}

model roles {
  id               Int                @id @default(autoincrement())
  name             String             @unique
  user_roles       user_roles[]
  role_permissions role_permissions[]
}

model permissions {
  id               Int                @id @default(autoincrement())
  name             String             @unique
  role_permissions role_permissions[]
}

model user_roles {
  id          Int      @id @default(autoincrement())
  user_id     Int
  role_id     Int
  assigned_at DateTime @default(now())
  user        users    @relation(fields: [user_id], references: [id])
  role        roles    @relation(fields: [role_id], references: [id])

  @@unique([user_id, role_id])
}

model role_permissions {
  id            Int         @id @default(autoincrement())
  role_id       Int
  permission_id Int
  assigned_at   DateTime    @default(now())
  roles         roles       @relation(fields: [role_id], references: [id])
  permissions   permissions @relation(fields: [permission_id], references: [id])

  @@unique([role_id, permission_id])
}
